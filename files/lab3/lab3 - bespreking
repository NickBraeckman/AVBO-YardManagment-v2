yard.reorder


1. overloop hele yard en markeer alle fouten --> lijstX     yz
2. voor alle fouten
    boolean plaats = zoekplaats();x

    if (!plaats)
        maakplaats();

        maakplaast

TODO modulo stuk moet er uit
TODO hoogtesprong controleren

int order = 1;


List<Container> fouteC's = {rood}

1. Zoek een foute container (return Container c)
    A. bovenste is fout -> return bovenste
    B. middenste fout
        -> markeer container //isSafe=false; (geen bovenop plaatsen)
        -> return bovenste
    C. geen foute containers
        C.1 lijst = leeg -> GEDAAN + return


        C.2 for( container in fouteC's )
                maakPlaats(c)


2. probeerVerplaats(Container c)

    List<Plaats> p = zoekPlaats(orde); // lijst van "order" en vrij (geen rekening met containers er onder)

    zoekVeiligePlaatsInLijst(p);   //zit er een fout onder een van de containers
        // 1. geval B. --> Container C   (fouten markeren zoalng je geen goede hebt)

    boolean verplaatst = false

    for (plaats in list<P>){
        if(!verplaatst){
            verplaatst = virtueelVerplaatsen(C,p1);
        } else {
            return
        }
    }

    voeg Container toe aan fouteC's

}

virtueelVerplaatsen(c,p1);
    verplaatsContainer(
        controller op fouten in alle stacks van deze container
            als fout --> return false
                undo
                + plaats van waar hij komt
            als juist --> return true

// enkel oproepen als een fouteC's niet leeg is
maakPlaats(Container c){
    probeerVerplaats(c)
    als niet gelukt

}

public ...(){

	for(Row row: rows){
		zoekPlaats(1)
	}
}

public zoekPlaats(int orde){

	List<p> = doorZoekYard(orde)

	for(p in list<p>){
		if(p.isSave){
			return p;
		}
	}
	zoekPlaats(orde++);
}













}

















maakPlaats(C){
    List<Container> lijsty = zoekPlaats2();

    if( C kan geplaatst op vanaf 1 mogelijk ){


    }else{
        //...

    }




}



if (remove upper ==safe){
    groen gebruiken

}